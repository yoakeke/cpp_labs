#include <iostream> // Подключение библиотеки для ввода-вывода
#include <locale>
// Функция obmen1: Обмен через передачу по значению (не работает)
void obmen1(int a, int b) {
    int temp = a; // Сохраняем значение a в temp
    a = b;        // Присваиваем a значение b
    b = temp;     // Присваиваем b значение temp
    // Однако изменения внутри функции не влияют на исходные переменные a и b,
    // так как параметры передаются по значению.
}

// Функция obmen2: Обмен через указатели
void obmen2(int* a, int* b) {
    int temp = *a; // Сохраняем значение, на которое ссылается a, в temp
    *a = *b;       // Присваиваем значение, на которое ссылается b, адресу a
    *b = temp;     // Присваиваем значение temp адресу b
    // Здесь мы меняем значения переменных через их адреса.
}

// Функция obmen3: Обмен через ссылки
void obmen3(int& a, int& b) {
    int temp = a; // Сохраняем значение a в temp
    a = b;        // Присваиваем a значение b
    b = temp;     // Присваиваем b значение temp
    // Ссылки позволяют напрямую изменять оригинальные переменные.
}

int main(void) {
    // Испралвяю кодировку для корректного вывода
    setlocale(LC_ALL, "Russian_Russia.1251");

    int a = 2, b = 5; // Инициализация переменных a и b

    // Вывод начальных значений
    std::cout << "До обмена: a = " << a << ", b = " << b << std::endl;

    // 1. Попытка обмена через передачу по значению (не работает)
    obmen1(a, b);
    std::cout << "После обмена 1: a = " << a << ", b = " << b << std::endl;

    // 2. Обмен через указатели
    obmen2(&a, &b); // Передаем адреса переменных a и b
    std::cout << "После обмена 2: a = " << a << ", b = " << b << std::endl;

    // 3. Обмен через ссылки
    obmen3(a, b); // Передаем ссылки на переменные a и b
    std::cout << "После обмена 3: a = " << a << ", b = " << b << std::endl;

    return 0;
}